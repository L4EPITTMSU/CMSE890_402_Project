{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. Functions/ index.md # The documentation homepage. plot_data.md # The documentation for plot data function plot_contour.md # the documentation for the plot contour function plot_save.md # the documentation for the plot save function main.md # the documentation for the main function","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. Functions/ index.md # The documentation homepage. plot_data.md # The documentation for plot data function plot_contour.md # the documentation for the plot contour function plot_save.md # the documentation for the plot save function main.md # the documentation for the main function","title":"Project layout"},{"location":"image/","text":"","title":"Plots"},{"location":"load_data/","text":"Loads numerical data from a given file. Args: filepath (str): The path to the file containing the numerical data. Returns: np.ndarray: A NumPy array of the data loaded from the file. Source code in functions.py 5 6 7 8 9 10 11 12 def load_data ( filepath : str ) -> np . ndarray : \"\"\" Loads numerical data from a given file. Args: filepath (str): The path to the file containing the numerical data. Returns: np.ndarray: A NumPy array of the data loaded from the file. \"\"\" My Load Data Function The function load_data is utilized for loading numerical data from a specified file. This function is particularly useful in scenarios where data needs to be imported for further analysis or processing. Parameters filepath (str): This parameter takes the path to the file containing the numerical data. The path should be a string specifying the location of the file on the file system. Returns np.ndarray: The function returns a NumPy array consisting of the data extracted from the provided file. The data is structured in the array format for ease of use in numerical and scientific computations. Example data = load_data(\"path/to/datafile.txt\") print(data) # Output: The content of 'datafile.txt' as a NumPy arra","title":"Load of data"},{"location":"load_data/#my-load-data-function","text":"The function load_data is utilized for loading numerical data from a specified file. This function is particularly useful in scenarios where data needs to be imported for further analysis or processing.","title":"My Load Data Function"},{"location":"load_data/#parameters","text":"filepath (str): This parameter takes the path to the file containing the numerical data. The path should be a string specifying the location of the file on the file system.","title":"Parameters"},{"location":"load_data/#returns","text":"np.ndarray: The function returns a NumPy array consisting of the data extracted from the provided file. The data is structured in the array format for ease of use in numerical and scientific computations.","title":"Returns"},{"location":"load_data/#example","text":"data = load_data(\"path/to/datafile.txt\") print(data) # Output: The content of 'datafile.txt' as a NumPy arra","title":"Example"},{"location":"main/","text":"Main function to load data from two files, plot, and save the graph. Args: input_file1 (str): Path to the first input file. input_file2 (str): Path to the second input file. output_file (str): Path where the output plot will be saved. Source code in functions.py 42 43 44 45 46 47 48 49 def main ( input_file1 : str , input_file2 : str , output_file : str ) -> None : \"\"\" Main function to load data from two files, plot, and save the graph. Args: input_file1 (str): Path to the first input file. input_file2 (str): Path to the second input file. output_file (str): Path where the output plot will be saved. \"\"\" Main Function The main function serves as the entry point for a script that loads data from two files, creates a plot, and saves it to a specified location. Parameters input_file1 (str): The path to the first input file from which data will be loaded. input_file2 (str): The path to the second input file from which data will be loaded. output_file (str): The path where the generated plot will be saved. Returns None: This function does not return a value. It orchestrates the process of data loading, plotting, and saving the plot. Usage The function is intended to be used as the main executable of a Python script. It can be invoked with command line arguments representing the file paths. Example if name == \" main \": input_file1 = sys.argv[1] input_file2 = sys.argv[2] output_file = sys.argv[3] main(input_file1, input_file2, output_file)","title":"main"},{"location":"main/#main-function","text":"The main function serves as the entry point for a script that loads data from two files, creates a plot, and saves it to a specified location.","title":"Main Function"},{"location":"main/#parameters","text":"input_file1 (str): The path to the first input file from which data will be loaded. input_file2 (str): The path to the second input file from which data will be loaded. output_file (str): The path where the generated plot will be saved.","title":"Parameters"},{"location":"main/#returns","text":"None: This function does not return a value. It orchestrates the process of data loading, plotting, and saving the plot. Usage The function is intended to be used as the main executable of a Python script. It can be invoked with command line arguments representing the file paths.","title":"Returns"},{"location":"main/#example","text":"if name == \" main \": input_file1 = sys.argv[1] input_file2 = sys.argv[2] output_file = sys.argv[3] main(input_file1, input_file2, output_file)","title":"Example"},{"location":"plot_contour/","text":"Generates and saves a contour plot from the given data. Args: data (np.ndarray): The data to be plotted, expected to contain x, y, and z values. title (str): Title of the plot. cmap (str): Colormap used for the contour plot. output_file (str): Path where the plot image will be saved. Source code in functions.py 31 32 33 34 35 36 37 38 39 def plot_contour ( data : np . ndarray , title : str , cmap : str , output_file : str ) -> None : \"\"\" Generates and saves a contour plot from the given data. Args: data (np.ndarray): The data to be plotted, expected to contain x, y, and z values. title (str): Title of the plot. cmap (str): Colormap used for the contour plot. output_file (str): Path where the plot image will be saved. \"\"\" My Plot Contour Function The plot_contour function generates and saves a contour plot based on the provided dataset. This function is useful in visualizing three-dimensional data in a two-dimensional plane. Parameters data (np.ndarray): A NumPy array containing the data to be plotted. It is expected to include x, y, and z values, where x and y are the coordinates, and z is the value to be contoured. title (str): The title of the plot, which will appear at the top of the graph. cmap (str): The colormap used for the contour plot. This string should correspond to one of Matplotlib's available colormaps. output_file (str): The path, including the filename, where the plot will be saved. This should include the file extension, such as .png or .jpg. Returns None: The function does not return a value. It creates and saves a contour plot. Example import numpy as np import matplotlib.pyplot as plt plot_contour(data, 'Sample Contour Plot', 'viridis', 'output/contour_plot.png')","title":"Plot of contour"},{"location":"plot_contour/#my-plot-contour-function","text":"The plot_contour function generates and saves a contour plot based on the provided dataset. This function is useful in visualizing three-dimensional data in a two-dimensional plane.","title":"My Plot Contour Function"},{"location":"plot_contour/#parameters","text":"data (np.ndarray): A NumPy array containing the data to be plotted. It is expected to include x, y, and z values, where x and y are the coordinates, and z is the value to be contoured. title (str): The title of the plot, which will appear at the top of the graph. cmap (str): The colormap used for the contour plot. This string should correspond to one of Matplotlib's available colormaps. output_file (str): The path, including the filename, where the plot will be saved. This should include the file extension, such as .png or .jpg.","title":"Parameters"},{"location":"plot_contour/#returns","text":"None: The function does not return a value. It creates and saves a contour plot.","title":"Returns"},{"location":"plot_contour/#example","text":"import numpy as np import matplotlib.pyplot as plt plot_contour(data, 'Sample Contour Plot', 'viridis', 'output/contour_plot.png')","title":"Example"},{"location":"plot_data/","text":"Plots x and y data with a specified label and color. Args: x (np.ndarray): The data for the x-axis. y (np.ndarray): The data for the y-axis. label (str): The label for the plot. color (str): The color of the plot line. Source code in functions.py 14 15 16 17 18 19 20 21 22 def plot_data ( x : np . ndarray , y : np . ndarray , label : str , color : str ) -> None : \"\"\" Plots x and y data with a specified label and color. Args: x (np.ndarray): The data for the x-axis. y (np.ndarray): The data for the y-axis. label (str): The label for the plot. color (str): The color of the plot line. \"\"\" My Plot Data Function The plot_data function is designed for plotting numerical data on a 2D graph, allowing for customization of the plot's appearance with labels and colors. Parameters x (np.ndarray): An array containing the data points for the x-axis. y (np.ndarray): An array containing the data points for the y-axis. label (str): A string representing the label for the plot, which will be displayed as part of the plot legend. color (str): A string specifying the color of the plot line. This should be a valid color name or hexadecimal color code. Returns None: This function does not return a value. It generates a plot based on the provided data. Example import matplotlib.pyplot as plt import numpy as np x = np.linspace(0, 10, 100) y = np.sin(x) plot_data(x, y, 'Sine Wave', 'blue') plt.show() # Displays the plot","title":"Plot of data"},{"location":"plot_data/#my-plot-data-function","text":"The plot_data function is designed for plotting numerical data on a 2D graph, allowing for customization of the plot's appearance with labels and colors.","title":"My Plot Data Function"},{"location":"plot_data/#parameters","text":"x (np.ndarray): An array containing the data points for the x-axis. y (np.ndarray): An array containing the data points for the y-axis. label (str): A string representing the label for the plot, which will be displayed as part of the plot legend. color (str): A string specifying the color of the plot line. This should be a valid color name or hexadecimal color code.","title":"Parameters"},{"location":"plot_data/#returns","text":"None: This function does not return a value. It generates a plot based on the provided data.","title":"Returns"},{"location":"plot_data/#example","text":"import matplotlib.pyplot as plt import numpy as np x = np.linspace(0, 10, 100) y = np.sin(x) plot_data(x, y, 'Sine Wave', 'blue') plt.show() # Displays the plot","title":"Example"},{"location":"plot_save/","text":"Saves the current plot to a file. Args: output_file (str): The path where the plot image will be saved. Source code in functions.py 24 25 26 27 28 29 def plot_save ( output_file : str ) -> None : \"\"\" Saves the current plot to a file. Args: output_file (str): The path where the plot image will be saved. \"\"\" My Plot Save Function The plot_save function is used for saving a currently active plot to a file, enabling the preservation and sharing of the graphical output. Parameters output_file (str): The file path where the plot image will be saved. This should include the desired file name and extension (e.g., .png, .jpg). Returns None: This function does not return a value. Its primary purpose is to save the plot to the specified file path. Example import matplotlib.pyplot as plt import numpy as np x = np.linspace(0, 10, 100) y = np.sin(x) plt.plot(x, y) plot_save(\"path/to/save/sine_wave_plot.png\")","title":"Plot save"},{"location":"plot_save/#my-plot-save-function","text":"The plot_save function is used for saving a currently active plot to a file, enabling the preservation and sharing of the graphical output.","title":"My Plot Save Function"},{"location":"plot_save/#parameters","text":"output_file (str): The file path where the plot image will be saved. This should include the desired file name and extension (e.g., .png, .jpg).","title":"Parameters"},{"location":"plot_save/#returns","text":"None: This function does not return a value. Its primary purpose is to save the plot to the specified file path.","title":"Returns"},{"location":"plot_save/#example","text":"import matplotlib.pyplot as plt import numpy as np x = np.linspace(0, 10, 100) y = np.sin(x) plt.plot(x, y) plot_save(\"path/to/save/sine_wave_plot.png\")","title":"Example"},{"location":"work_flow/","text":"Workflow Documentation for Supersonic Non-Premixed Reactive Flows .workflow { display: flex; flex-direction: column; align-items: center; gap: 20px; margin: 20px; } .rule { border: 1px solid black; padding: 10px; text-align: center; } .inputs span, .output span { display: block; margin: 5px 0; } Overview This documentation details a Snakemake workflow developed to process and visualize data from direct numerical simulations of supersonic non-premixed reactive flows. The key objective of this workflow is to generate analytical visualizations that aid in comprehending complex high-speed phenomena, which are pivotal in the advancement of technologies like scramjets and propulsion systems. The workflow consists of several rules, each designed to handle specific aspects of the data processing and visualization. Rule Descriptions Rule plot_tke - Plotting Turbulent Kinetic Energy (TKE) The plot_tke rule automates the visualization of Turbulent Kinetic Energy data, crucial for understanding the dynamics of high-speed flows. Input Files infile1=\"data/tke1.dat\" and infile2=\"data/tke2.dat\" : Contain TKE data essential for analyzing flow characteristics. Output File outfile=\"figures/tke_plot.png\" : A PNG image visualizing the TKE data, highlighting key aspects of the flow's kinetic energy. Shell Command Executes plot_tke.py script: Processes the TKE data to generate a plot that provides insights into the kinetic energy distribution in the flow. Rule plot_contour - Plotting Temperature Contours The plot_contour rule focuses on generating temperature contour plots, essential for visualizing thermal characteristics in reactive and non-reactive cases. Input Files infile1=\"data/temp150.dat1\" : Temperature data for the non-reactive case. infile2=\"data/temp175.dat1\" : Temperature data for the reactive case. Output Files outfile1=\"figures/non_reactive.png\" : Contour plot for the non-reactive case. outfile2=\"figures/reactive.png\" : Contour plot for the reactive case. Shell Command Executes contour.py script: Creates detailed contour plots that illustrate temperature variations, crucial for understanding thermal behaviors in supersonic flows. Connecting to the Main Objective Each rule in this workflow, including plot_tke and plot_contour , plays a vital role in dissecting the complex data from simulations. The TKE plots and temperature contours are instrumental in providing a deeper understanding of the flow dynamics and thermal properties in supersonic non-premixed reactive flows. These visualizations not only aid in fundamental research but also have significant implications for the development of high-speed applications like scramjets and advanced propulsion systems. By analyzing this data, we gain insights into the intricate behaviors of supersonic flows, paving the way for innovations in high-speed flight technologies.","title":"workflow documentation"},{"location":"work_flow/#workflow-documentation-for-supersonic-non-premixed-reactive-flows","text":".workflow { display: flex; flex-direction: column; align-items: center; gap: 20px; margin: 20px; } .rule { border: 1px solid black; padding: 10px; text-align: center; } .inputs span, .output span { display: block; margin: 5px 0; }","title":"Workflow Documentation for Supersonic Non-Premixed Reactive Flows"},{"location":"work_flow/#overview","text":"This documentation details a Snakemake workflow developed to process and visualize data from direct numerical simulations of supersonic non-premixed reactive flows. The key objective of this workflow is to generate analytical visualizations that aid in comprehending complex high-speed phenomena, which are pivotal in the advancement of technologies like scramjets and propulsion systems. The workflow consists of several rules, each designed to handle specific aspects of the data processing and visualization.","title":"Overview"},{"location":"work_flow/#rule-descriptions","text":"","title":"Rule Descriptions"},{"location":"work_flow/#rule-plot_tke-plotting-turbulent-kinetic-energy-tke","text":"The plot_tke rule automates the visualization of Turbulent Kinetic Energy data, crucial for understanding the dynamics of high-speed flows.","title":"Rule plot_tke - Plotting Turbulent Kinetic Energy (TKE)"},{"location":"work_flow/#input-files","text":"infile1=\"data/tke1.dat\" and infile2=\"data/tke2.dat\" : Contain TKE data essential for analyzing flow characteristics.","title":"Input Files"},{"location":"work_flow/#output-file","text":"outfile=\"figures/tke_plot.png\" : A PNG image visualizing the TKE data, highlighting key aspects of the flow's kinetic energy.","title":"Output File"},{"location":"work_flow/#shell-command","text":"Executes plot_tke.py script: Processes the TKE data to generate a plot that provides insights into the kinetic energy distribution in the flow.","title":"Shell Command"},{"location":"work_flow/#rule-plot_contour-plotting-temperature-contours","text":"The plot_contour rule focuses on generating temperature contour plots, essential for visualizing thermal characteristics in reactive and non-reactive cases.","title":"Rule plot_contour - Plotting Temperature Contours"},{"location":"work_flow/#input-files_1","text":"infile1=\"data/temp150.dat1\" : Temperature data for the non-reactive case. infile2=\"data/temp175.dat1\" : Temperature data for the reactive case.","title":"Input Files"},{"location":"work_flow/#output-files","text":"outfile1=\"figures/non_reactive.png\" : Contour plot for the non-reactive case. outfile2=\"figures/reactive.png\" : Contour plot for the reactive case.","title":"Output Files"},{"location":"work_flow/#shell-command_1","text":"Executes contour.py script: Creates detailed contour plots that illustrate temperature variations, crucial for understanding thermal behaviors in supersonic flows.","title":"Shell Command"},{"location":"work_flow/#connecting-to-the-main-objective","text":"Each rule in this workflow, including plot_tke and plot_contour , plays a vital role in dissecting the complex data from simulations. The TKE plots and temperature contours are instrumental in providing a deeper understanding of the flow dynamics and thermal properties in supersonic non-premixed reactive flows. These visualizations not only aid in fundamental research but also have significant implications for the development of high-speed applications like scramjets and advanced propulsion systems. By analyzing this data, we gain insights into the intricate behaviors of supersonic flows, paving the way for innovations in high-speed flight technologies.","title":"Connecting to the Main Objective"}]}